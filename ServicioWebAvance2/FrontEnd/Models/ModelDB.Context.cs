//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrontEnd.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ServiciosWebEntities : DbContext
    {
        public ServiciosWebEntities()
            : base("name=ServiciosWebEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Actor> Actors { get; set; }
        public virtual DbSet<Almacenamiento> Almacenamientoes { get; set; }
        public virtual DbSet<Autor> Autors { get; set; }
        public virtual DbSet<Bitacora> Bitacoras { get; set; }
        public virtual DbSet<Consecutivo> Consecutivos { get; set; }
        public virtual DbSet<Disco> Discoes { get; set; }
        public virtual DbSet<Disquera> Disqueras { get; set; }
        public virtual DbSet<Editorial> Editorials { get; set; }
        public virtual DbSet<Genero> Generoes { get; set; }
        public virtual DbSet<Idioma> Idiomas { get; set; }
        public virtual DbSet<Libro> Libros { get; set; }
        public virtual DbSet<Musica> Musicas { get; set; }
        public virtual DbSet<Pai> Pais { get; set; }
        public virtual DbSet<Pelicula> Peliculas { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tipo_Bitacora> Tipo_Bitacora { get; set; }
        public virtual DbSet<Tipo_Usuario> Tipo_Usuario { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
    
        public virtual int InsertLibro(Nullable<int> genero, string nombre, Nullable<int> autor, Nullable<int> idioma, Nullable<int> editorial, Nullable<int> ano, string preview, string descarga)
        {
            var generoParameter = genero.HasValue ?
                new ObjectParameter("Genero", genero) :
                new ObjectParameter("Genero", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var autorParameter = autor.HasValue ?
                new ObjectParameter("Autor", autor) :
                new ObjectParameter("Autor", typeof(int));
    
            var idiomaParameter = idioma.HasValue ?
                new ObjectParameter("Idioma", idioma) :
                new ObjectParameter("Idioma", typeof(int));
    
            var editorialParameter = editorial.HasValue ?
                new ObjectParameter("Editorial", editorial) :
                new ObjectParameter("Editorial", typeof(int));
    
            var anoParameter = ano.HasValue ?
                new ObjectParameter("ano", ano) :
                new ObjectParameter("ano", typeof(int));
    
            var previewParameter = preview != null ?
                new ObjectParameter("Preview", preview) :
                new ObjectParameter("Preview", typeof(string));
    
            var descargaParameter = descarga != null ?
                new ObjectParameter("Descarga", descarga) :
                new ObjectParameter("Descarga", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLibro", generoParameter, nombreParameter, autorParameter, idiomaParameter, editorialParameter, anoParameter, previewParameter, descargaParameter);
        }
    
        public virtual int InsertMusica(Nullable<int> genero, string nombre, string tipo_Interpretacion, Nullable<int> idioma, Nullable<int> pais, Nullable<int> disquera, Nullable<int> disco, Nullable<int> ano, string preview, string descarga)
        {
            var generoParameter = genero.HasValue ?
                new ObjectParameter("Genero", genero) :
                new ObjectParameter("Genero", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var tipo_InterpretacionParameter = tipo_Interpretacion != null ?
                new ObjectParameter("Tipo_Interpretacion", tipo_Interpretacion) :
                new ObjectParameter("Tipo_Interpretacion", typeof(string));
    
            var idiomaParameter = idioma.HasValue ?
                new ObjectParameter("Idioma", idioma) :
                new ObjectParameter("Idioma", typeof(int));
    
            var paisParameter = pais.HasValue ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(int));
    
            var disqueraParameter = disquera.HasValue ?
                new ObjectParameter("Disquera", disquera) :
                new ObjectParameter("Disquera", typeof(int));
    
            var discoParameter = disco.HasValue ?
                new ObjectParameter("Disco", disco) :
                new ObjectParameter("Disco", typeof(int));
    
            var anoParameter = ano.HasValue ?
                new ObjectParameter("Ano", ano) :
                new ObjectParameter("Ano", typeof(int));
    
            var previewParameter = preview != null ?
                new ObjectParameter("Preview", preview) :
                new ObjectParameter("Preview", typeof(string));
    
            var descargaParameter = descarga != null ?
                new ObjectParameter("Descarga", descarga) :
                new ObjectParameter("Descarga", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMusica", generoParameter, nombreParameter, tipo_InterpretacionParameter, idiomaParameter, paisParameter, disqueraParameter, discoParameter, anoParameter, previewParameter, descargaParameter);
        }
    
        public virtual int InsertPelicula(Nullable<int> genero, string nombre, Nullable<int> ano, Nullable<int> idioma, Nullable<int> actor1, Nullable<int> actor2, Nullable<int> actor3, Nullable<int> actor4, string preview, string descarga)
        {
            var generoParameter = genero.HasValue ?
                new ObjectParameter("Genero", genero) :
                new ObjectParameter("Genero", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var anoParameter = ano.HasValue ?
                new ObjectParameter("ano", ano) :
                new ObjectParameter("ano", typeof(int));
    
            var idiomaParameter = idioma.HasValue ?
                new ObjectParameter("Idioma", idioma) :
                new ObjectParameter("Idioma", typeof(int));
    
            var actor1Parameter = actor1.HasValue ?
                new ObjectParameter("Actor1", actor1) :
                new ObjectParameter("Actor1", typeof(int));
    
            var actor2Parameter = actor2.HasValue ?
                new ObjectParameter("Actor2", actor2) :
                new ObjectParameter("Actor2", typeof(int));
    
            var actor3Parameter = actor3.HasValue ?
                new ObjectParameter("Actor3", actor3) :
                new ObjectParameter("Actor3", typeof(int));
    
            var actor4Parameter = actor4.HasValue ?
                new ObjectParameter("Actor4", actor4) :
                new ObjectParameter("Actor4", typeof(int));
    
            var previewParameter = preview != null ?
                new ObjectParameter("Preview", preview) :
                new ObjectParameter("Preview", typeof(string));
    
            var descargaParameter = descarga != null ?
                new ObjectParameter("Descarga", descarga) :
                new ObjectParameter("Descarga", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPelicula", generoParameter, nombreParameter, anoParameter, idiomaParameter, actor1Parameter, actor2Parameter, actor3Parameter, actor4Parameter, previewParameter, descargaParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
